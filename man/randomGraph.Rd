% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/graph.R
\name{randomGraph}
\alias{randomGraph}
\title{Create a random static graph}
\usage{
randomGraph(n, m_p, type = c("gnp", "gnm"), directed = TRUE, loops = FALSE)
}
\arguments{
\item{n}{Integer containing the number of nodes.}

\item{m_p}{Numeric (p) or integer (M) containing the number of edges (M) for the 'gnm' model,or the probability (p) for 'gnp' model.}

\item{type}{A character containing the model type. There are two options: G(n,p) model "gnp" or G(n,M) model 'gnm'.
Sea details for further information. (Default "gnp")}

\item{directed}{logical. If FALSE, then all edges are duplicated by inverting 'from' and 'to' nodes (default TRUE).}

\item{loops}{logical. If TRUE loops are allowed in the graph.}
}
\description{
\code{randomGraph} function constructs a static random graph using the
Erdos-Renyi model.
}
\details{
Erdos Renyi Random Graph generator.

The Erdos-Renyi (Erdos and Renyi, 1959) is the first ever proposed algorithm for the formation of random graphs.
The original two definitions are:

- In the G(n,M) model, a graph is chosen uniformly at random from the collection of all graphs which have
n nodes and M edges. The nodes are considered to be labeled, meaning that graphs obtained from each other by permuting
the vertices are considered to be distinct.

- In the G(n,p) model, a graph is constructed by connecting labeled nodes randomly. Each edge is included in
the graph with probability p , independently from every other edge.
}
\note{
Currently, only the G(n,p) model is implemented in this function. For G(n,M) model we transform M to p by p = 2M / (n(n-1)).
Therefore, the 'gnm' model only generates approximately Erdos-Renyi Random Graphs, and the number of desired edges will not match.
However, if the size of the graph is large enough the function will generate graphs more similar to the expected Erdos-Renyi Model
and with the desired number of edges.
}
\examples{
graph = randomGraph(n=25, .1)

}
