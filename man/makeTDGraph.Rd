% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/graph.R
\name{makeTDGraph}
\alias{makeTDGraph}
\title{Create a discrete time-dependent graph}
\usage{
makeTDGraph(
  from,
  to,
  weight,
  crossTimes = NULL,
  startTime,
  timeStep,
  coords = NULL,
  directed = TRUE
)
}
\arguments{
\item{from}{Integer or character vector containing sources nodes IDs.}

\item{to}{Integer or character vector containing target nodes IDs.}

\item{weight}{A non-negative data.frame or matrix containing the edges time-dependent weights. See details}

\item{crossTimes}{A non-negative data.frame containing the edges time-dependent travel times. See details}

\item{startTime}{a POSIXct object with the start time information.}

\item{timeStep}{Number that represents the delta time in hours (time step) between weights.}

\item{coords}{A data.frame or matrix containing all nodes coordinates. Columns order should be 'node_ID', 'X', 'Y'. (Optional)}

\item{directed}{logical. If FALSE, then all edges are duplicated by inverting \code{from} and \code{to} nodes (default TRUE).}
}
\description{
The \code{makeTDGraph} function constructs a discrete time-dependent graph
}
\details{
The \code{makeTDGraph} function can be used to construct a weighted time-dependent graph.


'weight' is a non-negative data.frame or matrix describing the cost (e.g time, distance) between each 'edge (\code{from} and \code{to} nodes).
The values should match the edge represented by the '\code{from} and \code{to} arguments.

'crossTimes' is a non-negative data.frame or matrix describing the travel time between each edge (\code{from} and \code{to} nodes). It is only use when the
weights do not represent the travel time. The values should match the edge represented by the '\code{from} and \code{to} arguments.
}
\examples{
from = c(1, 2, 3)
to = c(2, 3, 1)
weight = data.frame("w1"=runif(3), "w2"=runif(3), "w3"=runif(3))
startTime = as.POSIXct("2021-08-06 12:47:00")
timeStep = 24 # hours
coords = data.frame("id"=1:3, "x"=10:12, "y"=c(2, 3, 5))
makeTDGraph(from=from, to=to, weight = weight, coords = coords,
startTime = startTime, timeStep=timeStep)

}
